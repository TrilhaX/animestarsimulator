warn('[TEMPEST HUB] Loading Ui')
wait(1)
local repo = 'https://raw.githubusercontent.com/TrapstarKSSKSKSKKS/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({

    Title = 'Tempest Hub | Anime Star Simulator',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

Library:Notify('Loading Anime Star Simulator Script', 5)


function  autoclick()
    while getgenv().autoclick == true do
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EnemyRemotes"):WaitForChild("AttackClick"):InvokeServer()
    end    
end

function autoroll()
    while getgenv().autoroll == true do 
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("InventoryRemotes"):WaitForChild("HeroRoll"):InvokeServer()
    end
end

function autogamepass()
    while getgenv().autogamepass == true do
        game:GetService("Players").LocalPlayer.Gamepasses["+2 Animon Equipped"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["+2 Crystal Open"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["2x Fuse"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["2x Relic Drops"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["2x Yen"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses.Autoclicker.Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["Fast Open"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses.Lucky.Value = true
        game:GetService("Players").LocalPlayer.Gamepasses.Magnet.Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["More Storage"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["Shiny Hunter"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["Super Lucky"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses.Teleport.Value = true
        game:GetService("Players").LocalPlayer.Gamepasses["Ultra Lucky"].Value = true
        game:GetService("Players").LocalPlayer.Gamepasses.VIP.Value = true
        wait()
    end
end

function SetWalkSpeed(Value)
    local walkSpeed = Value
    
    local UIS = game:GetService("UserInputService")
    local RS = game:GetService("RunService")
    local W, A, S, D
    local xVelo, yVelo
    
    while true do
        wait()
        local HRP = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local C = game.Workspace.CurrentCamera
        local LV = C.CFrame.LookVector

        for i, v in pairs(UIS:GetKeysPressed()) do
            if v.KeyCode == Enum.KeyCode.W then
                W = true
            end
            if v.KeyCode == Enum.KeyCode.A then
                A = true
            end
            if v.KeyCode == Enum.KeyCode.S then
                S = true
            end
            if v.KeyCode == Enum.KeyCode.D then
                D = true
            end
        end

        if W == true and S == true then
            yVelo = false
            W, S = nil, nil
        end

        if A == true and D == true then
            xVelo = false
            A, D = nil, nil
        end

        if yVelo ~= false then
            if W == true then
                if xVelo ~= false then
                    if A == true then
                        local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(45), 0)).LookVector
                        HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
                        W, A = nil, nil
                    else
                        if D == true then
                            local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-45), 0)).LookVector
                            HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
                            W, D = nil, nil
                        end
                    end
                end
            else
                if S == true then
                    if xVelo ~= false then
                        if A == true then
                            local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(135), 0)).LookVector
                            HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
                            S, A = nil, nil
                        else
                            if D == true then
                                local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-135), 0)).LookVector
                                HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
                                S, D = nil, nil
                            end
                        end
                    end
                end
            end
        end

        if W == true then
            HRP.Velocity = Vector3.new((LV.X * walkSpeed), HRP.Velocity.Y, (LV.Z * walkSpeed))
        end
        if S == true then
            HRP.Velocity = Vector3.new(-(LV.X * walkSpeed), HRP.Velocity.Y, -(LV.Z * walkSpeed))
        end
        if A == true then
            local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(90), 0)).LookVector
            HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
        end
        if D == true then
            local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-90), 0)).LookVector
            HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
        end

        xVelo, yVelo, W, A, S, D = nil, nil, nil, nil, nil, nil
        wait()
    end
end

function timereward()
    while getgenv().timereward == true do
        local args = {
            [1] = 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlaytimeRemotes"):WaitForChild("ClaimPlaytime"):InvokeServer(unpack(args))
        local args = {
            [1] = 2
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlaytimeRemotes"):WaitForChild("ClaimPlaytime"):InvokeServer(unpack(args))
        local args = {
            [1] = 3
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlaytimeRemotes"):WaitForChild("ClaimPlaytime"):InvokeServer(unpack(args))
        local args = {
            [1] = 4
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlaytimeRemotes"):WaitForChild("ClaimPlaytime"):InvokeServer(unpack(args))
        local args = {
            [1] = 5
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlaytimeRemotes"):WaitForChild("ClaimPlaytime"):InvokeServer(unpack(args))
        local args = {
            [1] = 6
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlaytimeRemotes"):WaitForChild("ClaimPlaytime"):InvokeServer(unpack(args))
    end
end

function autogetachievements()
    while getgenv().autogetachievements == true do
        local args = {
            [1] = "Luck 0"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Luck 1"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Luck 2"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Luck 3"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Luck 4"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Luck 5"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Luck 6"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Luck 7"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))              
        local args = {
            [1] = "Inventory 1"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Inventory 2"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Inventory 3"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Inventory 4"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Inventory 5"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Inventory 6"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Inventory 7"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))  
        local args = {
            [1] = "Inventory 8"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Inventory 9"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))        
        local args = {
            [1] = "Inventory 10"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))
        local args = {
            [1] = "Damage 1"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))
        local args = {
            [1] = "Damage 2"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Damage 3"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Damage 4"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Damage 5"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args)) 
        local args = {
            [1] = "Yen 1"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))
        local args = {
            [1] = "Yen 2"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Yen 3"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Yen 4"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Yen 5"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))            
        local args = {
            [1] = "Yen 6"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))
        local args = {
            [1] = "Arena 1"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))
        local args = {
            [1] = "Arena 2"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Critical 1"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))
        local args = {
            [1] = "Critical 2"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Critical 3"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))    
        local args = {
            [1] = "Critical 4"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UpgradesRemotes"):WaitForChild("ClaimUpgrade"):InvokeServer(unpack(args))   
        wait()
    end
end

function autoboostinf()
    while getgenv().autoboostinf == true do
    local player = game:GetService("Players").LocalPlayer
        if player then
        local boosts = player.Boosts
            if boosts then
                boosts.Damage.Value = 999999999999
                boosts.Luck.Value = 999999999999
                boosts.Shiny.Value = 999999999999
                boosts.SuperLuck.Value = 999999999999
                boosts.Yen.Value = 999999999999
                wait()
            end
        end
    end
end


local Tabs = {
    Main = Window:AddTab('Main'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

LeftGroupBox:AddToggle('Auto Click', {
    Text = 'Auto Click',
    Default = false,
    Callback = function(Value)
        getgenv().autoclick = Value
        autoclick()
    end
})

LeftGroupBox:AddToggle('Auto Gamepass', {
    Text = 'Auto Gamepass',
    Default = false,
    Callback = function(Value)
        getgenv().autogamepass = Value
        autogamepass()
    end
})

LeftGroupBox:AddToggle('Auto Boost Inf', {
    Text = 'Auto Boost Inf',
    Default = false,
    Callback = function(Value)
        getgenv().autoboostinf = Value
        autoboostinf()
    end
})

LeftGroupBox:AddToggle('Auto Get Achievements', {
    Text = 'Auto Get Achievements',
    Default = false,
    Callback = function(Value)
        getgenv().autogetachievements = Value
        autogetachievements()
    end
})

LeftGroupBox:AddToggle('Auto Get Time Rewards', {
    Text = 'Auto Get Time Rewards',
    Default = false,
    Callback = function(Value)
        getgenv().timereward = Value
        timereward()
    end
})

LeftGroupBox:AddSlider('Walkspeed', {
    Text = 'Walkspeed',
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        SetWalkSpeed(Value) -- Fixed the function call
    end
})

local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Library:SetWatermark(('Tempest Hub | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);


local Tabs = {
['UI Settings'] = Window:AddTab('UI Settings'),
}

Library:OnUnload(function()
    WatermarkConnection:Disconnect()

    print('Unloaded!')
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })


Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

ThemeManager:SetFolder('Tempest Hub')
SaveManager:SetFolder('Tempest Hub/Anime Adventures')

SaveManager:BuildConfigSection(Tabs['UI Settings'])

ThemeManager:ApplyToTab(Tabs['UI Settings'])

SaveManager:LoadAutoloadConfig()

warn('[TEMPEST HUB] Loading UI Settings')
wait(1)


for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end
warn('[TEMPEST HUB] Loading Anti Afk')
wait(1)
warn('[TEMPEST HUB] Loaded')
